# TWO TIER APPLICATION

# Author: SAVITHRU LOKANATH
# Contact: SAVITHRU AT JUNIPER.NET
# Copyright (c) 2017 Juniper Networks, Inc. All rights reserved


heat_template_version: 2015-10-15

description: >
  Heat template to create a two-tier web application

parameters:
  public_virtual_network_name:
    type: string
    description: Name of the public virtual network

  public_virtual_network_subnet_prefix:
    type: string
    description: Prefix of the public virtual network

  public_virtual_network_subnet_prefix_len:
    type: string
    description: Prefix length of the public virtual network

  public_virtual_network_subnet_default_gw:
    type: string
    description: Default gateway of the public virtual network

  public_virtual_network_is_shared:
    type: boolean
    description: Is the public virtual network shared or not

  public_virtual_network_external_ipam:
    type: boolean
    description: Is the public virtual network external to Contrail IPAM

  public_virtual_network_route_target:
    type: string
    description: Route Target for the public virtual network

  web_virtual_network_name:
    type: string
    description: Name of the web virtual network

  web_virtual_network_subnet_prefix:
    type: string
    description: Prefix of the web virtual network

  web_virtual_network_subnet_prefix_len:
    type: string
    description: Prefix length of the web virtual network

  web_virtual_network_subnet_default_gw:
    type: string
    description: Default gateway of the web virtual network

  web_server_name:
    type: string
    description: Name of the web server virtual machine

  db_virtual_network_name:
    type: string
    description: Name of the database virtual network

  db_virtual_network_subnet_prefix:
    type: string
    description: Prefix of the database virtual network

  db_virtual_network_subnet_prefix_len:
    type: string
    description: Prefix length of the database virtual network

  db_virtual_network_subnet_default_gw:
    type: string
    description: Default gateway of the database virtual network

  db_server_name:
    type: string
    description: Name of the database server virtual machine

  image_name:
    type: string
    description: Image name

  flavor_type:
    type: string
    description: Flavor type


resources:
  template_PublicNetworkIpam:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: public_virtual_network_name }

  template_WebNetworkIpam:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: web_virtual_network_name }

  template_DbNetworkIpam:
    type: OS::ContrailV2::NetworkIpam
    properties:
      name: { get_param: db_virtual_network_name }

  template_PublicVirtualNetwork:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_PublicNetworkIpam ]
    properties:
      name: { get_param: public_virtual_network_name }
      network_ipam_refs: [{ get_resource: template_PublicNetworkIpam }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: public_virtual_network_subnet_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: public_virtual_network_subnet_prefix_len },
                },
              network_ipam_refs_data_ipam_subnets_default_gateway: { get_param: public_virtual_network_subnet_default_gw },
            }]
         }]
      route_target_list:
        {
          route_target_list_route_target: [{ get_param: public_virtual_network_route_target }],
        }
      is_shared: { get_param: public_virtual_network_is_shared }
      router_external: { get_param: public_virtual_network_external_ipam }

  template_WebVirtualNetwork:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_WebNetworkIpam ]
    properties:
      name: { get_param: web_virtual_network_name }
      network_ipam_refs: [{ get_resource: template_WebNetworkIpam }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: web_virtual_network_subnet_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: web_virtual_network_subnet_prefix_len },
                },
              network_ipam_refs_data_ipam_subnets_default_gateway: { get_param: web_virtual_network_subnet_default_gw },
            }]
         }]

  template_DbVirtualNetwork:
    type: OS::ContrailV2::VirtualNetwork
    depends_on: [ template_DbNetworkIpam ]
    properties:
      name: { get_param: db_virtual_network_name }
      network_ipam_refs: [{ get_resource: template_DbNetworkIpam }]
      network_ipam_refs_data:
        [{
          network_ipam_refs_data_ipam_subnets:
            [{
              network_ipam_refs_data_ipam_subnets_subnet:
                {
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix: { get_param: db_virtual_network_subnet_prefix },
                  network_ipam_refs_data_ipam_subnets_subnet_ip_prefix_len: { get_param: db_virtual_network_subnet_prefix_len },
                },
              network_ipam_refs_data_ipam_subnets_default_gateway: { get_param: db_virtual_network_subnet_default_gw },
            }]
         }]

  template_FloatingIPPool:
    type: OS::ContrailV2::FloatingIpPool
    properties:
      name: { get_param: public_virtual_network_name }
      floating_ip_pool_prefixes:
        {
          floating_ip_pool_prefixes_subnet:
            [{
              floating_ip_pool_prefixes_subnet_ip_prefix: { get_param: floating_ip_pool_prefix },
              floating_ip_pool_prefixes_subnet_ip_prefix_len: { get_param: floating_ip_pool_prefix_len },
            }],
        }
      virtual_network: { get_param: public_virtual_network_name }

  template_floatingIP:
    type: OS::Nova::FloatingIP
    depends_on: [ template_WebVirtualNetwork ]
    properties:
      pool: Public

  template_WebInstance:
    type: OS::Nova::Server
    depends_on: [ template_WebVirtualNetwork ]
    properties:
      name: { get_param: web_server_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_type }
      networks:
        - network: { get_resource: template_WebVirtualNetwork }
      user_data:
        get_resource: template_WebInit
      user_data_format: RAW

  template_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: template_floatingIP }
      server_id: { get_resource: template_WebInstance }

  template_DbInstance:
    type: OS::Nova::Server
    depends_on: [ template_DbVirtualNetwork ]
    properties:
      name: { get_param: db_server_name }
      image: { get_param: image_name }
      flavor: { get_param: flavor_type }
      networks:
        - network: { get_resource: template_DbVirtualNetwork }
      user_data:
        get_resource: template_DbInit
      user_data_format: RAW

  template_WebInit:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: { get_file: cloud-init/web.sh }
          params:
            $web_hostname: { get_param: web_server_name }

  template_DbInit:
    type: OS::Heat::SoftwareConfig
    properties:
      config:
        str_replace:
          template: { get_file: cloud-init/db.sh }
          params:
            $db_hostname: { get_param: db_server_name }

outputs:
  web_instance_ip:
    description: IP of web server
    value: { get_attr: [ template_WebInstance, networks, { str_split: [':', { list_join: [':', { get_attr: [ template_WebVirtualNetwork, fq_name ] } ] }, 2] }, 0 ] }

  db_instance_ip:
    description: IP of database server
    value: { get_attr: [ template_DbInstance, networks, { str_split: [':', { list_join: [':', { get_attr: [ template_DbVirtualNetwork, fq_name ] } ]  }, 2] }, 0 ] }
